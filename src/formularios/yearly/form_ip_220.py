from django.shortcuts import render
from src.dao.data_db_dao import DAO
import polars as pl


def IP_220(request):
    if request.method == "POST":
        # Retrieve form data
        company_name = request.POST.get("company_name")
        address = request.POST.get("address")
        email = request.POST.get("email")
        liaison_officer = request.POST.get("liaison_officer")
        ssn = request.POST.get("ssn")
        tel = request.POST.get("tel")
        fax = request.POST.get("fax")
        legal_form = request.POST.get("legal_form")
        cfc = request.POST.get("cfc")
        business_type = request.POST.get("business_type")
        business_function = request.POST.get("business_function")
        branches = request.POST.get("branches")
        branches_yes = request.POST.get("branches_yes")
        closing_date = request.POST.get("closing_date")
        start_year = request.POST.get("start_year")
        end_year = request.POST.get("end_year")
        services_revenues_12 = request.POST.get("services_revenues_12")
        services_revenues_13 = request.POST.get("services_revenues_13")
        residential_consumers_12 = request.POST.get("residential_consumers_12")
        residential_consumers_13 = request.POST.get("residential_consumers_13")
        other_consumers_12 = request.POST.get("other_consumers_12")
        other_consumers_13 = request.POST.get("other_consumers_13")
        incomes_rents_12 = request.POST.get("incomes_rents_12")
        incomes_rents_13 = request.POST.get("incomes_rents_13")
        incomes_interests_12 = request.POST.get("incomes_interests_12")
        incomes_interests_13 = request.POST.get("incomes_interests_13")
        dividends_12 = request.POST.get("dividends_12")
        dividends_13 = request.POST.get("dividends_13")
        others_incomes_12 = request.POST.get("others_incomes_12")
        others_incomes_13 = request.POST.get("others_incomes_13")
        total_income_12 = request.POST.get("total_income_12")
        total_income_13 = request.POST.get("total_income_13")
        salaries_2012 = request.POST.get("salaries_2012")
        salaries_2013 = request.POST.get("salaries_2013")
        expenses_interests_12 = request.POST.get("expenses_interests_12")
        expenses_interests_13 = request.POST.get("expenses_interests_13")
        expenses_rents_12 = request.POST.get("expenses_rents_12")
        expenses_rents_13 = request.POST.get("expenses_rents_13")
        depreciation_12 = request.POST.get("depreciation_12")
        depreciation_13 = request.POST.get("depreciation_13")
        bad_debts_12 = request.POST.get("bad_debts_12")
        bad_debts_13 = request.POST.get("bad_debts_13")
        donations_12 = request.POST.get("donations_12")
        donations_13 = request.POST.get("donations_13")
        sales_tax_12 = request.POST.get("sales_tax_12")
        sales_tax_13 = request.POST.get("sales_tax_13")
        machinery_12 = request.POST.get("machinery_12")
        machinery_13 = request.POST.get("machinery_13")
        other_purchases_12 = request.POST.get("other_purchases_12")
        other_purchases_13 = request.POST.get("other_purchases_13")
        licenses_12 = request.POST.get("licenses_12")
        licenses_13 = request.POST.get("licenses_13")
        other_expenses_12 = request.POST.get("other_expenses_12")
        other_expenses_13 = request.POST.get("other_expenses_13")
        total_expenses_12 = request.POST.get("total_expenses_12")
        total_expenses_13 = request.POST.get("total_expenses_13")
        net_profit_12 = request.POST.get("net_profit_12")
        net_profit_13 = request.POST.get("net_profit_13")
        income_tax_12 = request.POST.get("income_tax_12")
        income_tax_13 = request.POST.get("income_tax_13")
        profit_after_tax_12 = request.POST.get("profit_after_tax_12")
        profit_after_tax_13 = request.POST.get("profit_after_tax_13")
        withheld_tax_12 = request.POST.get("withheld_tax_12")
        withheld_tax_13 = request.POST.get("withheld_tax_13")
        signature = request.POST.get("signature")
        rank = request.POST.get("rank")

        data = [
            pl.Series("company_name", [company_name], dtype=pl.String),
            pl.Series("address", [address], dtype=pl.String),
            pl.Series("email", [email], dtype=pl.String),
            pl.Series("liaison_officer", [liaison_officer], dtype=pl.String),
            pl.Series("ssn", [ssn], dtype=pl.String),
            pl.Series("tel", [tel], dtype=pl.String),
            pl.Series("fax", [fax], dtype=pl.String),
            pl.Series("legal_form", [legal_form], dtype=pl.String),
            pl.Series("cfc", [cfc], dtype=pl.String),
            pl.Series("business_type", [business_type], dtype=pl.String),
            pl.Series("business_function", [business_function], dtype=pl.String),
            pl.Series("branches", [branches], dtype=pl.String),
            pl.Series("branches_yes", [branches_yes], dtype=pl.String),
            pl.Series("closing_date", [closing_date], dtype=pl.String),
            pl.Series("start_year", [start_year], dtype=pl.String),
            pl.Series("end_year", [end_year], dtype=pl.String),
            pl.Series("services_revenues_12", [float(services_revenues_12)], dtype=pl.Float64),
            pl.Series("services_revenues_13", [float(services_revenues_13)], dtype=pl.Float64),
            pl.Series("residential_consumers_12", [float(residential_consumers_12)], dtype=pl.Float64),
            pl.Series("residential_consumers_13", [float(residential_consumers_13)], dtype=pl.Float64),
            pl.Series("other_consumers_12", [float(other_consumers_12)], dtype=pl.Float64),
            pl.Series("other_consumers_13", [float(other_consumers_13)], dtype=pl.Float64),
            pl.Series("incomes_rents_12", [float(incomes_rents_12)], dtype=pl.Float64),
            pl.Series("incomes_rents_13", [float(incomes_rents_13)], dtype=pl.Float64),
            pl.Series("incomes_interests_12", [float(incomes_interests_12)], dtype=pl.Float64),
            pl.Series("incomes_interests_13", [float(incomes_interests_13)], dtype=pl.Float64),
            pl.Series("dividends_12", [float(dividends_12)], dtype=pl.Float64),
            pl.Series("dividends_13", [float(dividends_13)], dtype=pl.Float64),
            pl.Series("others_incomes_12", [float(others_incomes_12)], dtype=pl.Float64),
            pl.Series("others_incomes_13", [float(others_incomes_13)], dtype=pl.Float64),
            pl.Series("total_income_12", [float(total_income_12)], dtype=pl.Float64),
            pl.Series("total_income_13", [float(total_income_13)], dtype=pl.Float64),
            pl.Series("salaries_2012", [float(salaries_2012)], dtype=pl.Float64),
            pl.Series("salaries_2013", [float(salaries_2013)], dtype=pl.Float64),
            pl.Series("expenses_interests_12", [float(expenses_interests_12)], dtype=pl.Float64),
            pl.Series("expenses_interests_13", [float(expenses_interests_13)], dtype=pl.Float64),
            pl.Series("expenses_rents_12", [float(expenses_rents_12)], dtype=pl.Float64),
            pl.Series("expenses_rents_13", [float(expenses_rents_13)], dtype=pl.Float64),
            pl.Series("depreciation_12", [float(depreciation_12)], dtype=pl.Float64),
            pl.Series("depreciation_13", [float(depreciation_13)], dtype=pl.Float64),
            pl.Series("bad_debts_12", [float(bad_debts_12)], dtype=pl.Float64),
            pl.Series("bad_debts_13", [float(bad_debts_13)], dtype=pl.Float64),
            pl.Series("donations_12", [float(donations_12)], dtype=pl.Float64),
            pl.Series("donations_13", [float(donations_13)], dtype=pl.Float64),
            pl.Series("sales_tax_12", [float(sales_tax_12)], dtype=pl.Float64),
            pl.Series("sales_tax_13", [float(sales_tax_13)], dtype=pl.Float64),
            pl.Series("machinery_12", [float(machinery_12)], dtype=pl.Float64),
            pl.Series("machinery_13", [float(machinery_13)], dtype=pl.Float64),
            pl.Series("other_purchases_12", [float(other_purchases_12)], dtype=pl.Float64),
            pl.Series("other_purchases_13", [float(other_purchases_13)], dtype=pl.Float64),
            pl.Series("licenses_12", [float(licenses_12)], dtype=pl.Float64),
            pl.Series("licenses_13", [float(licenses_13)], dtype=pl.Float64),
            pl.Series("other_expenses_12", [float(other_expenses_12)], dtype=pl.Float64),
            pl.Series("other_expenses_13", [float(other_expenses_13)], dtype=pl.Float64),
            pl.Series("total_expenses_12", [float(total_expenses_12)], dtype=pl.Float64),
            pl.Series("total_expenses_13", [float(total_expenses_13)], dtype=pl.Float64),
            pl.Series("net_profit_12", [float(net_profit_12)], dtype=pl.Float64),
            pl.Series("net_profit_13", [float(net_profit_13)], dtype=pl.Float64),
            pl.Series("income_tax_12", [float(income_tax_12)], dtype=pl.Float64),
            pl.Series("income_tax_13", [float(income_tax_13)], dtype=pl.Float64),
            pl.Series("profit_after_tax_12", [float(profit_after_tax_12)], dtype=pl.Float64),
            pl.Series("profit_after_tax_13", [float(profit_after_tax_13)], dtype=pl.Float64),
            pl.Series("withheld_tax_12", [float(withheld_tax_12)], dtype=pl.Float64),
            pl.Series("withheld_tax_13", [float(withheld_tax_13)], dtype=pl.Float64),
            pl.Series("signature", [signature], dtype=pl.String),
            pl.Series("rank", [rank], dtype=pl.String)
        ]
        
        df = pl.DataFrame(data)
        DAO().insert_forms(df, "IP_220", 17)

        return render(request, "forms/succesfull.html")
    return render(request, "forms/yearly/ingreso_neto/IP-220.html")
