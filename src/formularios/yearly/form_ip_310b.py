from django.shortcuts import render
from src.dao.data_db_dao import DAO
import polars as pl


def IP_310b(request):
    if request.method == "POST":
        # Retrieve form data
        company_name = request.POST.get("company_name")
        address = request.POST.get("address")
        email = request.POST.get("email")
        liaison_officer = request.POST.get("liaison_officer")
        ssn = request.POST.get("ssn")
        tel = request.POST.get("tel")
        fax = request.POST.get("fax")
        legal_form = request.POST.get("legal_form")
        cfc = request.POST.get("cfc")
        end_month = request.POST.get("end_month")
        main_product_1 = request.POST.get("main_product_1")
        main_product_2 = request.POST.get("main_product_2")
        raw_material_used = request.POST.get("raw_material_used")
        closing_date = request.POST.get("closing_date")
        start_year = request.POST.get("start_year")
        end_year = request.POST.get("end_year")
        total_sales_1 = request.POST.get("total_sales_1")
        total_sales_2 = request.POST.get("total_sales_2")
        products_manufactured_1 = request.POST.get("products_manufactured_1")
        products_manufactured_2 = request.POST.get("products_manufactured_2")
        rum_1 = request.POST.get("rum_1")
        rum_2 = request.POST.get("rum_2")
        beer_1 = request.POST.get("beer_1")
        beer_2 = request.POST.get("beer_2")
        malt_1 = request.POST.get("malt_1")
        malt_2 = request.POST.get("malt_2")
        soft_drinks_1 = request.POST.get("soft_drinks_1")
        soft_drinks_2 = request.POST.get("soft_drinks_2")
        others_1 = request.POST.get("others_1")
        others_2 = request.POST.get("others_2")
        goods_acquired_1 = request.POST.get("goods_acquired_1")
        goods_acquired_2 = request.POST.get("goods_acquired_2")
        wines_1 = request.POST.get("wines_1")
        wines_2 = request.POST.get("wines_2")
        soft_drinks_3 = request.POST.get("soft_drinks_3")
        soft_drinks_4 = request.POST.get("soft_drinks_4")
        whiskey_1 = request.POST.get("whiskey_1")
        whiskey_2 = request.POST.get("whiskey_2")
        brandy_1 = request.POST.get("brandy_1")
        brandy_2 = request.POST.get("brandy_2")
        other_3 = request.POST.get("other_3")
        other_4 = request.POST.get("other_4")
        manufacturing_cost_1 = request.POST.get("manufacturing_cost_1")
        manufacturing_cost_2 = request.POST.get("manufacturing_cost_2")
        inventories_begginning_1 = request.POST.get("inventories_begginning_1")
        inventories_begginning_2 = request.POST.get("inventories_begginning_2")
        purchases_1 = request.POST.get("purchases_1")
        purchases_2 = request.POST.get("purchases_2")
        total_raw_1 = request.POST.get("total_raw_1")
        total_raw_2 = request.POST.get("total_raw_2")
        imported_1 = request.POST.get("imported_1")
        imported_2 = request.POST.get("imported_2")
        others_5 = request.POST.get("others_5")
        others_6 = request.POST.get("others_6")
        direct_wages_1 = request.POST.get("direct_wages_1")
        direct_wages_2 = request.POST.get("direct_wages_2")
        depreciation_1 = request.POST.get("depreciation_1")
        depreciation_2 = request.POST.get("depreciation_2")
        rent_land_1 = request.POST.get("rent_land_1")
        rent_land_2 = request.POST.get("rent_land_2")
        other_direct_1 = request.POST.get("other_direct_1")
        other_direct_2 = request.POST.get("other_direct_2")
        indirect_cost_1 = request.POST.get("indirect_cost_1")
        indirect_cost_2 = request.POST.get("indirect_cost_2")
        inventories_end_1 = request.POST.get("inventories_end_1")
        inventories_end_2 = request.POST.get("inventories_end_2")
        gross_profit_1 = request.POST.get("gross_profit_1")
        gross_profit_2 = request.POST.get("gross_profit_2")
        other_operating_1 = request.POST.get("other_operating_1")
        other_operating_2 = request.POST.get("other_operating_2")
        interest_1 = request.POST.get("interest_1")
        interest_2 = request.POST.get("interest_2")
        rent_land_3 = request.POST.get("rent_land_3")
        rent_land_4 = request.POST.get("rent_land_4")
        capital_gain_1 = request.POST.get("capital_gain_1")
        capital_gain_2 = request.POST.get("capital_gain_2")
        other_1 = request.POST.get("other_1")
        other_2 = request.POST.get("other_2")
        total_gross_1 = request.POST.get("total_gross_1")
        total_gross_2 = request.POST.get("total_gross_2")
        expenses_not_1 = request.POST.get("expenses_not_1")
        expenses_not_2 = request.POST.get("expenses_not_2")
        salaries_1 = request.POST.get("salaries_1")
        salaries_2 = request.POST.get("salaries_2")
        interest_3 = request.POST.get("interest_3")
        interest_4 = request.POST.get("interest_4")
        depreciation_3 = request.POST.get("depreciation_3")
        depreciation_4 = request.POST.get("depreciation_4")
        donations_1 = request.POST.get("donations_1")
        donations_2 = request.POST.get("donations_2")
        rent_land_5 = request.POST.get("rent_land_5")
        rent_land_6 = request.POST.get("rent_land_6")
        excise_taxes_1 = request.POST.get("excise_taxes_1")
        excise_taxes_2 = request.POST.get("excise_taxes_2")
        other_operating_3 = request.POST.get("other_operating_3")
        other_operating_4 = request.POST.get("other_operating_4")
        sales_tax_1 = request.POST.get("sales_tax_1")
        sales_tax_2 = request.POST.get("sales_tax_2")
        machinery_1 = request.POST.get("machinery_1")
        machinery_2 = request.POST.get("machinery_2")
        on_other_1 = request.POST.get("on_other_1")
        on_other_2 = request.POST.get("on_other_2")
        licenses_1 = request.POST.get("licenses_1")
        licenses_2 = request.POST.get("licenses_2")
        net_loss_1 = request.POST.get("net_loss_1")
        net_loss_2 = request.POST.get("net_loss_2")
        income_tax_1 = request.POST.get("income_tax_1")
        income_tax_2 = request.POST.get("income_tax_2")
        profit_after_tax_1 = request.POST.get("profit_after_tax_1")
        profit_after_tax_2 = request.POST.get("profit_after_tax_2")
        sales_and_use_withheld_1 = request.POST.get("sales_and_use_withheld_1")
        sales_and_use_withheld_2 = request.POST.get("sales_and_use_withheld_2")
        branches = request.POST.get("branches")
        branches_if_yes = request.POST.get("branches_if_yes")
        signature = request.POST.get("signature")
        rank = request.POST.get("rank")

        data = [
            pl.Series("company_name", [company_name], dtype=pl.String),
            pl.Series("address", [address], dtype=pl.String),
            pl.Series("email", [email], dtype=pl.String),
            pl.Series("liaison_officer", [liaison_officer], dtype=pl.String),
            pl.Series("ssn", [ssn], dtype=pl.String),
            pl.Series("tel", [tel], dtype=pl.String),
            pl.Series("fax", [fax], dtype=pl.String),
            pl.Series("legal_form", [legal_form], dtype=pl.String),
            pl.Series("cfc", [cfc], dtype=pl.String),
            pl.Series("end_month", [end_month], dtype=pl.String),
            pl.Series("main_product_1", [main_product_1], dtype=pl.String),
            pl.Series("main_product_2", [main_product_2], dtype=pl.String),
            pl.Series("raw_material_used", [raw_material_used], dtype=pl.String),
            pl.Series("closing_date", [closing_date], dtype=pl.String),
            pl.Series("start_year", [start_year], dtype=pl.String),
            pl.Series("end_year", [end_year], dtype=pl.String),
            pl.Series("total_sales_1", [float(total_sales_1)], dtype=pl.Float64),
            pl.Series("total_sales_2", [float(total_sales_2)], dtype=pl.Float64),
            pl.Series("products_manufactured_1", [float(products_manufactured_1)], dtype=pl.Float64),
            pl.Series("products_manufactured_2", [float(products_manufactured_2)], dtype=pl.Float64),
            pl.Series("rum_1", [float(rum_1)], dtype=pl.Float64),
            pl.Series("rum_2", [float(rum_2)], dtype=pl.Float64),
            pl.Series("beer_1", [float(beer_1)], dtype=pl.Float64),
            pl.Series("beer_2", [float(beer_2)], dtype=pl.Float64),
            pl.Series("malt_1", [float(malt_1)], dtype=pl.Float64),
            pl.Series("malt_2", [float(malt_2)], dtype=pl.Float64),
            pl.Series("soft_drinks_1", [float(soft_drinks_1)], dtype=pl.Float64),
            pl.Series("soft_drinks_2", [float(soft_drinks_2)], dtype=pl.Float64),
            pl.Series("others_1", [float(others_1)], dtype=pl.Float64),
            pl.Series("others_2", [float(others_2)], dtype=pl.Float64),
            pl.Series("goods_acquired_1", [float(goods_acquired_1)], dtype=pl.Float64),
            pl.Series("goods_acquired_2", [float(goods_acquired_2)], dtype=pl.Float64),
            pl.Series("wines_1", [float(wines_1)], dtype=pl.Float64),
            pl.Series("wines_2", [float(wines_2)], dtype=pl.Float64),
            pl.Series("soft_drinks_3", [float(soft_drinks_3)], dtype=pl.Float64),
            pl.Series("soft_drinks_4", [float(soft_drinks_4)], dtype=pl.Float64),
            pl.Series("whiskey_1", [float(whiskey_1)], dtype=pl.Float64),
            pl.Series("whiskey_2", [float(whiskey_2)], dtype=pl.Float64),
            pl.Series("brandy_1", [float(brandy_1)], dtype=pl.Float64),
            pl.Series("brandy_2", [float(brandy_2)], dtype=pl.Float64),
            pl.Series("other_3", [float(other_3)], dtype=pl.Float64),
            pl.Series("other_4", [float(other_4)], dtype=pl.Float64),
            pl.Series("manufacturing_cost_1", [float(manufacturing_cost_1)], dtype=pl.Float64),
            pl.Series("manufacturing_cost_2", [float(manufacturing_cost_2)], dtype=pl.Float64),
            pl.Series("inventories_begginning_1", [float(inventories_begginning_1)], dtype=pl.Float64),
            pl.Series("inventories_begginning_2", [float(inventories_begginning_2)], dtype=pl.Float64),
            pl.Series("purchases_1", [float(purchases_1)], dtype=pl.Float64),
            pl.Series("purchases_2", [float(purchases_2)], dtype=pl.Float64),
            pl.Series("total_raw_1", [float(total_raw_1)], dtype=pl.Float64),
            pl.Series("total_raw_2", [float(total_raw_2)], dtype=pl.Float64),
            pl.Series("imported_1", [float(imported_1)], dtype=pl.Float64),
            pl.Series("imported_2", [float(imported_2)], dtype=pl.Float64),
            pl.Series("others_5", [float(others_5)], dtype=pl.Float64),
            pl.Series("others_6", [float(others_6)], dtype=pl.Float64),
            pl.Series("direct_wages_1", [float(direct_wages_1)], dtype=pl.Float64),
            pl.Series("direct_wages_2", [float(direct_wages_2)], dtype=pl.Float64),
            pl.Series("depreciation_1", [float(depreciation_1)], dtype=pl.Float64),
            pl.Series("depreciation_2", [float(depreciation_2)], dtype=pl.Float64),
            pl.Series("rent_land_1", [float(rent_land_1)], dtype=pl.Float64),
            pl.Series("rent_land_2", [float(rent_land_2)], dtype=pl.Float64),
            pl.Series("other_direct_1", [float(other_direct_1)], dtype=pl.Float64),
            pl.Series("other_direct_2", [float(other_direct_2)], dtype=pl.Float64),
            pl.Series("indirect_cost_1", [float(indirect_cost_1)], dtype=pl.Float64),
            pl.Series("indirect_cost_2", [float(indirect_cost_2)], dtype=pl.Float64),
            pl.Series("inventories_end_1", [float(inventories_end_1)], dtype=pl.Float64),
            pl.Series("inventories_end_2", [float(inventories_end_2)], dtype=pl.Float64),
            pl.Series("gross_profit_1", [float(gross_profit_1)], dtype=pl.Float64),
            pl.Series("gross_profit_2", [float(gross_profit_2)], dtype=pl.Float64),
            pl.Series("other_operating_1", [float(other_operating_1)], dtype=pl.Float64),
            pl.Series("other_operating_2", [float(other_operating_2)], dtype=pl.Float64),
            pl.Series("interest_1", [float(interest_1)], dtype=pl.Float64),
            pl.Series("interest_2", [float(interest_2)], dtype=pl.Float64),
            pl.Series("rent_land_3", [float(rent_land_3)], dtype=pl.Float64),
            pl.Series("rent_land_4", [float(rent_land_4)], dtype=pl.Float64),
            pl.Series("capital_gain_1", [float(capital_gain_1)], dtype=pl.Float64),
            pl.Series("capital_gain_2", [float(capital_gain_2)], dtype=pl.Float64),
            pl.Series("other_1", [float(other_1)], dtype=pl.Float64),
            pl.Series("other_2", [float(other_2)], dtype=pl.Float64),
            pl.Series("total_gross_1", [float(total_gross_1)], dtype=pl.Float64),
            pl.Series("total_gross_2", [float(total_gross_2)], dtype=pl.Float64),
            pl.Series("expenses_not_1", [float(expenses_not_1)], dtype=pl.Float64),
            pl.Series("expenses_not_2", [float(expenses_not_2)], dtype=pl.Float64),
            pl.Series("salaries_1", [float(salaries_1)], dtype=pl.Float64),
            pl.Series("salaries_2", [float(salaries_2)], dtype=pl.Float64),
            pl.Series("interest_3", [float(interest_3)], dtype=pl.Float64),
            pl.Series("interest_4", [float(interest_4)], dtype=pl.Float64),
            pl.Series("depreciation_3", [float(depreciation_3)], dtype=pl.Float64),
            pl.Series("depreciation_4", [float(depreciation_4)], dtype=pl.Float64),
            pl.Series("donations_1", [float(donations_1)], dtype=pl.Float64),
            pl.Series("donations_2", [float(donations_2)], dtype=pl.Float64),
            pl.Series("rent_land_5", [float(rent_land_5)], dtype=pl.Float64),
            pl.Series("rent_land_6", [float(rent_land_6)], dtype=pl.Float64),
            pl.Series("excise_taxes_1", [float(excise_taxes_1)], dtype=pl.Float64),
            pl.Series("excise_taxes_2", [float(excise_taxes_2)], dtype=pl.Float64),
            pl.Series("other_operating_3", [float(other_operating_3)], dtype=pl.Float64),
            pl.Series("other_operating_4", [float(other_operating_4)], dtype=pl.Float64),
            pl.Series("sales_tax_1", [float(sales_tax_1)], dtype=pl.Float64),
            pl.Series("sales_tax_2", [float(sales_tax_2)], dtype=pl.Float64),
            pl.Series("machinery_1", [float(machinery_1)], dtype=pl.Float64),
            pl.Series("machinery_2", [float(machinery_2)], dtype=pl.Float64),
            pl.Series("on_other_1", [float(on_other_1)], dtype=pl.Float64),
            pl.Series("on_other_2", [float(on_other_2)], dtype=pl.Float64),
            pl.Series("licenses_1", [float(licenses_1)], dtype=pl.Float64),
            pl.Series("licenses_2", [float(licenses_2)], dtype=pl.Float64),
            pl.Series("net_loss_1", [float(net_loss_1)], dtype=pl.Float64),
            pl.Series("net_loss_2", [float(net_loss_2)], dtype=pl.Float64),
            pl.Series("income_tax_1", [float(income_tax_1)], dtype=pl.Float64),
            pl.Series("income_tax_2", [float(income_tax_2)], dtype=pl.Float64),
            pl.Series("profit_after_tax_1", [float(profit_after_tax_1)], dtype=pl.Float64),
            pl.Series("profit_after_tax_2", [float(profit_after_tax_2)], dtype=pl.Float64),
            pl.Series("sales_and_use_withheld_1", [float(sales_and_use_withheld_1)], dtype=pl.Float64),
            pl.Series("sales_and_use_withheld_2", [float(sales_and_use_withheld_2)], dtype=pl.Float64),
            pl.Series("branches", [branches], dtype=pl.String),
            pl.Series("branches_if_yes", [branches_if_yes], dtype=pl.String),
            pl.Series("signature", [signature], dtype=pl.String),
            pl.Series("rank", [rank], dtype=pl.String),
        ]
        
        df = pl.DataFrame(data)
        DAO().insert_forms(df, "IP_310b", 32)

        return render(request, "forms/succesfull.html")
    return render(request, "forms/yearly/ingreso_neto/IP-310b.html")
